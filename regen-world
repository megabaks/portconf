#!/bin/bash

world="/var/lib/portage/world"

green="\033[01;32m"
red="\033[01;31m"
restore="\033[00m"
contrast="\033[1m"

tmp_world="$(mktemp)"
##### for test
backup="${world}-backup"
mv "${world}" "${backup}"

installed="$(qlist -CI | sort -u)"
echo "${installed}" > "${world}"

echo -e "Calculating dependencies"

pretend="$(emerge -eopd --columns --with-bdeps=y world 2>/dev/null | grep -v "blocks" | awk '/^\[/ {print $4}')"
pretend+="$(qlist -CI `emerge -epO system | awk '/\[/ {print $4}'`)"$'\n'

for atom in ${installed};do
	if ! grep -q "^${atom}$" <<< "${pretend}" && ! grep -q ".*-libs/" <<< "${atom}";then
			echo "${atom}" >> "${tmp_world}"
			echo -e "world++: ${green}${atom}${restore}"
	fi
done

echo -e "${contrast}world original:${restore} $(cat "${backup}" | wc -l) lines"
echo -e "${contrast}world fixed:${restore} $(cat "${tmp_world}" | wc -l) lines"
mv "${tmp_world}" "${world}"

PS3=`echo -e "${contrast}Choose package which you want save:${restore} "`
choose_target(){
	select target in ${pretend};do
		echo "=${target}"
		break
	done
}
add_in_world(){
	notrash_pkgs+=" $(choose_target)"
	for tp in ${notrash_pkgs};do
		pretend="$(sed -e "s|^${tp#=}$||" -e '/^$/d' <<< "${pretend}")"
	done
}
ask(){
	pretend="$(emerge -pc | grep 'All selected packages:' | sed 's|.*:||1' | tr ' ' $'\n')"
	echo -e "\n${pretend// /$'\n'}"
	if [[ -n "$(sed '/^$/d' <<< "${pretend}")" ]];then
		echo -ne "\n${contrast}Would you like save some packages?${restore} [${green}Yes${restore}/${red}No${restore}] "
		while read x;do
			[[ -z "$(sed '/^$/d' <<< "${pretend}")" ]] && break
			case ${x} in
				Yes | YES | yes | Y | y | "" )
					add_in_world;
					while [[ -z "${enough}" && "$(echo "${pretend// /$'\n'}" | sed '/^$/d' | wc -l)" != "0" ]];do
						echo -ne "${contrast}More?${restore} [${green}Yes${restore}/${red}No${restore}] "
						while read y;do
							case ${y} in
								Yes | YES | yes | Y | y | "" )
									add_in_world;
									break;;
								No | NO | no | N | n )
									enough="1"
									break;;
								* ) echo -ne "Sorry, response '${y}' not understood. [${green}Yes${restore}/${red}No${restore}] "
									continue;;
							esac
						done
					done
					break;;
				No | NO | no | N | n )
					break;;
				* ) echo -ne "Sorry, response '${x}' not understood. [${green}Yes${restore}/${red}No${restore}] "
					continue;;
			esac
		done
		[[ -n "$(sed '/^$/d' <<< "${notrash_pkgs}")" ]] && emerge -Own ${notrash_pkgs}
	else
		return 0
	fi
}
for t in 1 2;do
	[[ "${t}" == "1" ]] && echo -e "emerge -pc: ${green}check...${restore}"
	[[ "${t}" == "2" ]] && echo -e "emerge -pc: ${green}recheck...${restore}"
	ask
	unset enough
done

##### for test
mv "${backup}" "${world}"
